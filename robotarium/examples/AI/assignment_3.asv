%%%%% Get Robotarium object used to communicate with the robots/simulator
% Do not modify!!!
rb = RobotariumBuilder();
%%%%%

%%%%%% Agent parameters
% Do not modify!!!
%%%%%

% Swarm size: number of agents
N = 10; 
% Radius of each robot is 0.08 repulsion-orientation-attraction
rr = 0.16; 
ro = 0.24;
ra = 4.00;
% Initial estimates
sensor_est = 100*rand(N, 1); 
% Storage for temperature estimates
sensor_est_history = []; %store sensor estimates
% Nearest neighbors, if using Topological model to communicate
top_dist = 4;
% Blind spot, if using Visual model to communicate
half_sense = pi*105/180;
% Total iterations in an episode
total_iterations = 2500;
% Time step
time_step = 1;
% The Compromised Agent is chosen at random. This agent 
bad_robot = randi(N);

%%%% Robotarium setup
% Do not modify!!!
r = rb.set_number_of_agents(N).set_save_data(false).build();
x = r.get_poses();
r.step();
si_barrier_certificate = create_si_barrier_certificate('SafetyRadius',0.001);
si_to_uni_dynamics = create_si_to_uni_mapping2();
args = {'PositionError', 0.01, 'RotationError', 50};
init_checker = create_is_initialized(args{:});
controller = create_si_position_controller();
dxi = zeros(2,N); % The 2D velocity vector of all N robots
%%%%%

%%%%% Simulation
% Modify, if absolutely needed
%%%%%

% For each iteration in time:
for t = 1:time_step:total_iterations
    
    % Get the latest pose information
    x = r.get_poses();
    
    % Characterize what the group as a whole is doing
    [Op,Or] = get_params(x, N);
    
    % Check everyone's blind spots
    [blind_neighbors] = check_blind_spot(x, N, half_sense);
    
    % Get everyone's 2D velocity vector (i.e., heading)
    [dxi] = swarm(rr, ro, ra, x, blind_neighbors, N, dxi);
    
    % Modify everyone's 2D velocity vector in order to stay in the arena
    dxi = bounce_off_wall(dxi, x, N);
    
    % Get comms neighbors using the metric model and setting the metric
    % Metric comms model range set to the radius of attraction
    [neighbors] = find_neighbors('M', N, x, top_dist, ra);

    % How much should the sensor estimate of each agent change?
    delta_sensor_est = estimate(sensor_est, neighbors, N, bad_robot);

    % Update sensor estimate by incorporating the amount of change
    sensor_est = sensor_est + (time_step * delta_sensor_est); 
    
    % Malicious actor does its own thing
    sensor_est(bad_robot, 1) = malicious_estimate; 
    
    % Store everyone's history of estimates for plotting purposes
    sensor_est_history = [sensor_est_history, sensor_est];
    
    %%%%% Robotarium uses dxi to move the agents
    % Do not modify!!!
    dxi = si_barrier_certificate(dxi, x(1:2, :));
    dxu = si_to_uni_dynamics(dxi, x);
    r.set_velocities(1:N, dxu);
    r.step();
    %%%%%
    
    % Save a frame every 100 iterations
    if (~mod(t,100))
        saveas(gcf,['t',num2str(t)],'png');
    end
    
end

%%%%% Plotting
% Do not modify!!!
r.call_at_scripts_end();
figure; % Plot the sensor estimates for each agent over time
for ii=1:1:N
    plot(sensor_est_history(ii, 1:1:total_iterations), 'LineWidth', 2);
    hold on;
end
axis([-100 total_iterations 0 100]);
xlabel('time iteration');
ylabel('sensor estimates');
saveas(gcf,'sensor_estimation','png');
%%%%%


